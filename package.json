{
  "name": "com.unity.dt.app-ui",
  "displayName": "App UI",
  "version": "1.0.0-pre.5",
  "unity": "2021.3",
  "category": "UI",
  "keywords": [
    "app",
    "ui",
    "components",
    "runtime",
    "framework",
    "navigation",
    "dependency-injection",
    "mvvm",
    "undostack",
    "redux",
    "state-management",
    "dark-theme",
    "data-binding",
    "cloud",
    "unity",
    "app-ui"
  ],
  "repository": {
    "url": "https://github.com/Unity-Technologies/unity-app-ui.git",
    "type": "git",
    "revision": "4187ab9d436818b2100deb7df4bbfc193062bb5b"
  },
  "description": "App UI is a versatile and customizable UI library for Unity that provides essential building blocks for creating beautiful and responsive user interfaces. With support for MVVM architecture, state management, and localization, App UI simplifies app development while maintaining flexibility and extensibility. The library includes a wide range of UI components, design tokens, and symbols, all of which can be easily customized to fit your app's unique style and branding.",
  "dependencies": {
    "com.unity.modules.androidjni": "1.0.0",
    "com.unity.modules.uielements": "1.0.0",
    "com.unity.modules.physics": "1.0.0"
  },
  "samples": [
    {
      "displayName": "Drag And Drop",
      "description": "Example of drag and drop system using App UI DropZone component and Dragger/DropTarget manipulators",
      "path": "Samples~/Drag And Drop"
    },
    {
      "displayName": "UI Kit",
      "description": "Every component in a single page",
      "path": "Samples~/UI Kit"
    },
    {
      "displayName": "StoryBook",
      "description": "StoryBookJS-like window in the Editor",
      "path": "Samples~/StoryBook"
    },
    {
      "displayName": "Navigation",
      "description": "Navigation system",
      "path": "Samples~/Navigation"
    },
    {
      "displayName": "MVVM",
      "description": "Example that showcases the MVVM pattern with dependency injection",
      "path": "Samples~/MVVM"
    },
    {
      "displayName": "Redux",
      "description": "Example of state management with Redux",
      "path": "Samples~/Redux"
    },
    {
      "displayName": "MVVM And Redux",
      "description": "Example that showcases the MVVM pattern with dependency injection and state management with Redux",
      "path": "Samples~/MVVM And Redux"
    },
    {
      "displayName": "UndoRedo",
      "description": "Example of undo/redo system",
      "path": "Samples~/UndoRedo"
    },
    {
      "displayName": "Trackpad",
      "description": "Example of Trackpad gesture recognition",
      "path": "Samples~/Trackpad"
    }
  ],
  "_upm": {
    "changelog": "### Changed\n\n- Migrated code into the App UI monorepo at https://github.com/Unity-Technologies/unity-app-ui\n- Renamed `format` UXML Attribute to `format-string` to bind correctly in UIBuilder\n- The `MacroCommand.Flush` method will now call `UndoCommand.Flush` on its child commands from the most recent to the oldest one.\n  This is the same order as the one used by the `MacroCommand.Undo` method.\n- Renamed CircularProgress and LinearProgress `color` Uxml Attribute to `color-override` to bind correctly in UIBuilder\n- Float Fields using a string format set on Percentage (P) will now use the same value as what you typed\n\n### Added\n\n- Added `disabled` property on every components that needed it in order to bind correctly with UIBuilder\n- Added `Spacer` component.\n\n### Fixed\n\n- Fixed the height of Toast components to be `auto`.\n- Fixed `MacroCommand.Undo` and `MacroCommand.Redo` methods."
  },
  "upmCi": {
    "footprint": "55847e16b55597aa04d447ace22c25785a498b65"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.dt.app-ui@1.0/manual/index.html"
}
